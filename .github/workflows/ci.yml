name: CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

jobs:
  code-quality:
    name: Análise de Código e Qualidade
    runs-on: ubuntu-latest
    steps:
      - name: Checkout código
        uses: actions/checkout@v4

      - name: Configurar Bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: latest

      - name: Instalar dependências
        run: bun install

      - name: Verificar formatação com Prettier
        run: bun run format:check

      - name: Análise de código com ESLint
        env:
          AUTH_SECRET: "secret123"
          AUTH_TRUST_HOST: true
          DB_HOST: "127.0.0.1"
          DB_NAME: "nullbank_test"
          DB_PASS: "nullbank123"
          DB_USER: "nullbank"
          DB_PORT: "3307"
        run: bun run lint

      - name: Verificação de tipos TypeScript
        run: bun run typecheck

  build-test:
    name: Teste de Build
    runs-on: ubuntu-latest
    needs: code-quality
    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: root
          MYSQL_DATABASE: nullbank_test
          MYSQL_USER: nullbank
          MYSQL_PASSWORD: nullbank123
        ports:
          - 3307:3306
        options: >-
          --health-cmd="mysqladmin ping"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=3
    steps:
      - name: Checkout código
        uses: actions/checkout@v4

      - name: Configurar Bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: latest

      - name: Instalar dependências
        run: bun install

      - name: Instalar cliente MySQL
        run: sudo apt-get update && sudo apt-get install -y mysql-client

      - name: Aguardar MySQL estar pronto
        run: |
          until mysqladmin ping -h 127.0.0.1 -P 3307 --silent; do
            echo 'Aguardando MySQL...'
            sleep 2
          done
          echo 'MySQL está pronto!'

      - name: Build da aplicação
        run: bun run build
        env:
          AUTH_SECRET: "secret123"
          AUTH_TRUST_HOST: true
          DB_HOST: "127.0.0.1"
          DB_NAME: "nullbank_test"
          DB_PASS: "nullbank123"
          DB_USER: "nullbank"
          DB_PORT: "3307"

      - name: Verificar arquivos de build
        run: |
          echo "Verificando se o build foi criado..."
          ls -la .next/
          echo "Build concluído com sucesso!"

  security-audit:
    name: Auditoria de Segurança
    runs-on: ubuntu-latest
    steps:
      - name: Checkout código
        uses: actions/checkout@v4

      - name: Configurar Bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: latest

      - name: Instalar dependências
        run: bun install

      - name: Instalar jq para processar JSON
        run: sudo apt-get update && sudo apt-get install -y jq

      - name: Auditoria de segurança (apenas high/critical)
        run: |
          audit_result=$(bun audit --json 2>/dev/null || true)

          if [ -z "$audit_result" ]; then
            echo "❌ Falha ao executar bun audit"
            exit 1
          fi

          if echo "$audit_result" | jq -e '.vulnerabilities' > /dev/null 2>&1; then
            high_severity_found=$(echo "$audit_result" | jq -r '.vulnerabilities[] | select(.severity == "high" or .severity == "critical") | .title' 2>/dev/null)

            if [ -n "$high_severity_found" ]; then
              echo "$high_severity_found"
              echo "Auditoria falhou devido a vulnerabilidades de alta severidade"
              exit 1
            else
              echo "✅ Nenhuma vulnerabilidade de alta severidade encontrada."
              exit 0
            fi
          else
            echo "✅ Nenhuma vulnerabilidade encontrada"
            exit 0
          fi

  jobs-summary:
    name: Resumo dos Testes
    runs-on: ubuntu-latest
    needs: [code-quality, build-test, security-audit]
    if: always()
    steps:
      - name: Resumo dos Resultados
        run: |
          echo "RESUMO DOS TESTES - NULLBANK CI/CD"
          echo "========================================"
          echo "- Análise de Código: ${{ needs.code-quality.result }}"
          echo "- Teste de Build: ${{ needs.build-test.result }}"
          echo "- Testes de Segurança: ${{ needs.security-audit.result }}"
          echo "========================================"

          # Verificar se algum teste falhou
          if [[ "${{ needs.code-quality.result }}" != "success" ||
                "${{ needs.build-test.result }}" != "success" ||
                "${{ needs.security-audit.result }}" != "success" ]]; then
            echo "❌ Alguns testes falharam! Verifique os logs acima."
            exit 1
          else
            echo "✅ Todos os testes passaram com sucesso!"
          fi
